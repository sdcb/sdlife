//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Sql.g4 by ANTLR 4.5.3.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace sdlife.web.Managers.SqlAntlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SqlParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, DATE=14, BETWEEN=15, SEPARATOR=16, 
		AND=17, NOT=18, OR=19, IN=20, SYNTAX=21, STRING=22, WS=23, BlockComment=24, 
		LineComment=25, NUMBER=26;
	public const int
		RULE_run = 0, RULE_predicate = 1, RULE_expression = 2;
	public static readonly string[] ruleNames = {
		"run", "predicate", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'*'", "'/'", "'+'", "'-'", null, null, null, null, null, null, null, 
		null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "DATE", "BETWEEN", "SEPARATOR", "AND", "NOT", "OR", "IN", 
		"SYNTAX", "STRING", "WS", "BlockComment", "LineComment", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class RunContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public RunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_run; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRun(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRun(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunContext run() {
		RunContext _localctx = new RunContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_run);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; predicate(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisContext : PredicateContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ParenthesisContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : PredicateContext {
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public NotContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleOperatorContext : PredicateContext {
		public ITerminalNode SYNTAX() { return GetToken(SqlParser.SYNTAX, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SingleOperatorContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSingleOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSingleOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenContext : PredicateContext {
		public ITerminalNode SYNTAX() { return GetToken(SqlParser.SYNTAX, 0); }
		public ITerminalNode BETWEEN() { return GetToken(SqlParser.BETWEEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(SqlParser.AND, 0); }
		public BetweenContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterBetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitBetween(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainsContext : PredicateContext {
		public ITerminalNode SYNTAX() { return GetToken(SqlParser.SYNTAX, 0); }
		public ITerminalNode IN() { return GetToken(SqlParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterContains(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitContains(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContains(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOrContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode AND() { return GetToken(SqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SqlParser.OR, 0); }
		public AndOrContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAndOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAndOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				_localctx = new ContainsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 9; Match(SYNTAX);
				State = 10; Match(IN);
				State = 11; Match(T__0);
				State = 12; expression(0);
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__1) {
					{
					{
					State = 13; Match(T__1);
					State = 14; expression(0);
					}
					}
					State = 19;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 20; Match(T__2);
				}
				break;

			case 2:
				{
				_localctx = new SingleOperatorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 22; Match(SYNTAX);
				State = 23;
				_la = _input.La(1);
				if ( !(_la==T__3 || _la==T__4) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 24; expression(0);
				}
				break;

			case 3:
				{
				_localctx = new SingleOperatorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 25; Match(SYNTAX);
				State = 26;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 27; expression(0);
				}
				break;

			case 4:
				{
				_localctx = new BetweenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 28; Match(SYNTAX);
				State = 29; Match(BETWEEN);
				State = 30; expression(0);
				State = 31; Match(AND);
				State = 32; expression(0);
				}
				break;

			case 5:
				{
				_localctx = new ParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 34; Match(T__0);
				State = 35; predicate(0);
				State = 36; Match(T__2);
				}
				break;

			case 6:
				{
				_localctx = new NotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 38; Match(NOT);
				State = 39; predicate(3);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 50;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 48;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new AndOrContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 42;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 43; Match(AND);
						State = 44; predicate(3);
						}
						break;

					case 2:
						{
						_localctx = new AndOrContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 45;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 46; Match(OR);
						State = 47; predicate(2);
						}
						break;
					}
					} 
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionContext : ExpressionContext {
		public ITerminalNode SYNTAX() { return GetToken(SqlParser.SYNTAX, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(SqlParser.NUMBER, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryFunctionContext : ExpressionContext {
		public ITerminalNode SYNTAX() { return GetToken(SqlParser.SYNTAX, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterBinaryFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitBinaryFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionParenthesisContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterExpressionParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitExpressionParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(SqlParser.STRING, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateContext : ExpressionContext {
		public ITerminalNode DATE() { return GetToken(SqlParser.DATE, 0); }
		public DateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				_localctx = new ExpressionParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 54; Match(T__0);
				State = 55; expression(0);
				State = 56; Match(T__2);
				}
				break;

			case 2:
				{
				_localctx = new FunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 58; Match(SYNTAX);
				State = 59; Match(T__0);
				State = 60; expression(0);
				State = 61; Match(T__2);
				}
				break;

			case 3:
				{
				_localctx = new BinaryFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 63; Match(SYNTAX);
				State = 64; Match(T__0);
				State = 65; expression(0);
				State = 66; Match(T__1);
				State = 67; expression(0);
				State = 68; Match(T__2);
				}
				break;

			case 4:
				{
				_localctx = new NumberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 70; Match(NUMBER);
				}
				break;

			case 5:
				{
				_localctx = new StringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 71; Match(STRING);
				}
				break;

			case 6:
				{
				_localctx = new DateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 72; Match(DATE);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 83;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 81;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 76;
						((BinaryContext)_localctx).@operator = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__9 || _la==T__10) ) {
							((BinaryContext)_localctx).@operator = _errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 77; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 78;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 79;
						((BinaryContext)_localctx).@operator = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((BinaryContext)_localctx).@operator = _errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 80; expression(5);
						}
						break;
					}
					} 
				}
				State = 85;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return predicate_sempred((PredicateContext)_localctx, predIndex);

		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1CY\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3\x12\n\x3\f\x3\xE\x3\x15\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x5\x3+\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x33\n\x3\f\x3\xE\x3\x36\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x5\x4L\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4T"+
		"\n\x4\f\x4\xE\x4W\v\x4\x3\x4\x2\x2\x4\x4\x6\x5\x2\x2\x4\x2\x6\x2\x2\x6"+
		"\x3\x2\x6\a\x3\x2\b\v\x3\x2\f\r\x3\x2\xE\xF\x64\x2\b\x3\x2\x2\x2\x4*\x3"+
		"\x2\x2\x2\x6K\x3\x2\x2\x2\b\t\x5\x4\x3\x2\t\x3\x3\x2\x2\x2\n\v\b\x3\x1"+
		"\x2\v\f\a\x17\x2\x2\f\r\a\x16\x2\x2\r\xE\a\x3\x2\x2\xE\x13\x5\x6\x4\x2"+
		"\xF\x10\a\x4\x2\x2\x10\x12\x5\x6\x4\x2\x11\xF\x3\x2\x2\x2\x12\x15\x3\x2"+
		"\x2\x2\x13\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14\x16\x3\x2\x2\x2\x15"+
		"\x13\x3\x2\x2\x2\x16\x17\a\x5\x2\x2\x17+\x3\x2\x2\x2\x18\x19\a\x17\x2"+
		"\x2\x19\x1A\t\x2\x2\x2\x1A+\x5\x6\x4\x2\x1B\x1C\a\x17\x2\x2\x1C\x1D\t"+
		"\x3\x2\x2\x1D+\x5\x6\x4\x2\x1E\x1F\a\x17\x2\x2\x1F \a\x11\x2\x2 !\x5\x6"+
		"\x4\x2!\"\a\x13\x2\x2\"#\x5\x6\x4\x2#+\x3\x2\x2\x2$%\a\x3\x2\x2%&\x5\x4"+
		"\x3\x2&\'\a\x5\x2\x2\'+\x3\x2\x2\x2()\a\x14\x2\x2)+\x5\x4\x3\x5*\n\x3"+
		"\x2\x2\x2*\x18\x3\x2\x2\x2*\x1B\x3\x2\x2\x2*\x1E\x3\x2\x2\x2*$\x3\x2\x2"+
		"\x2*(\x3\x2\x2\x2+\x34\x3\x2\x2\x2,-\f\x4\x2\x2-.\a\x13\x2\x2.\x33\x5"+
		"\x4\x3\x5/\x30\f\x3\x2\x2\x30\x31\a\x15\x2\x2\x31\x33\x5\x4\x3\x4\x32"+
		",\x3\x2\x2\x2\x32/\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2"+
		"\x34\x35\x3\x2\x2\x2\x35\x5\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\b"+
		"\x4\x1\x2\x38\x39\a\x3\x2\x2\x39:\x5\x6\x4\x2:;\a\x5\x2\x2;L\x3\x2\x2"+
		"\x2<=\a\x17\x2\x2=>\a\x3\x2\x2>?\x5\x6\x4\x2?@\a\x5\x2\x2@L\x3\x2\x2\x2"+
		"\x41\x42\a\x17\x2\x2\x42\x43\a\x3\x2\x2\x43\x44\x5\x6\x4\x2\x44\x45\a"+
		"\x4\x2\x2\x45\x46\x5\x6\x4\x2\x46G\a\x5\x2\x2GL\x3\x2\x2\x2HL\a\x1C\x2"+
		"\x2IL\a\x18\x2\x2JL\a\x10\x2\x2K\x37\x3\x2\x2\x2K<\x3\x2\x2\x2K\x41\x3"+
		"\x2\x2\x2KH\x3\x2\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2LU\x3\x2\x2\x2MN\f"+
		"\a\x2\x2NO\t\x4\x2\x2OT\x5\x6\x4\bPQ\f\x6\x2\x2QR\t\x5\x2\x2RT\x5\x6\x4"+
		"\aSM\x3\x2\x2\x2SP\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2"+
		"\x2V\a\x3\x2\x2\x2WU\x3\x2\x2\x2\t\x13*\x32\x34KSU";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace sdlife.web.Managers.SqlAntlr
