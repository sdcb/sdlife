//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Sql.g4 by ANTLR 4.5.3.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace sdlife.web.Models.SqlAntlr.Details {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SqlParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface ISqlListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>Parenthesis</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis([NotNull] SqlParser.ParenthesisContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parenthesis</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis([NotNull] SqlParser.ParenthesisContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] SqlParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] SqlParser.NotContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SingleOperator</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleOperator([NotNull] SqlParser.SingleOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingleOperator</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleOperator([NotNull] SqlParser.SingleOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Between</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBetween([NotNull] SqlParser.BetweenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Between</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBetween([NotNull] SqlParser.BetweenContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Contains</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContains([NotNull] SqlParser.ContainsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Contains</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContains([NotNull] SqlParser.ContainsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>AndOr</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndOr([NotNull] SqlParser.AndOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndOr</c>
	/// labeled alternative in <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndOr([NotNull] SqlParser.AndOrContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Function</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] SqlParser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Function</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] SqlParser.FunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] SqlParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] SqlParser.NumberContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryFunction</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryFunction([NotNull] SqlParser.BinaryFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryFunction</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryFunction([NotNull] SqlParser.BinaryFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionParenthesis</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionParenthesis([NotNull] SqlParser.ExpressionParenthesisContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionParenthesis</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionParenthesis([NotNull] SqlParser.ExpressionParenthesisContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Binary</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinary([NotNull] SqlParser.BinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Binary</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinary([NotNull] SqlParser.BinaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] SqlParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] SqlParser.StringContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Date</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDate([NotNull] SqlParser.DateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Date</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDate([NotNull] SqlParser.DateContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.run"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRun([NotNull] SqlParser.RunContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.run"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRun([NotNull] SqlParser.RunContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate([NotNull] SqlParser.PredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate([NotNull] SqlParser.PredicateContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] SqlParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] SqlParser.ExpressionContext context);
}
} // namespace sdlife.web.Managers.SqlAntlr
